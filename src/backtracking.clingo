
%%%%%%%%%% BACKTRACKING %%%%%%%%%%
% NOTE: A transition's firing is recorded in the transition's history the next timestep, after the firing.

%FIND EACH TRANSITIONS HIGHEST HISTORY INSTANCE.
not_highest(T,H1,TS) :- transhistory(T,H1,TS), transhistory(T,H2,TS), H1<H2, trans(T), timestep(H1), timestep(H2),
                        timestep(TS). 
highestinstance(T,H,TS) :- not not_highest(T,H,TS), transhistory(T,H,TS), trans(T), timestep(H),
                        timestep(TS).  

% RECORD NEW HISTORY INSTANCE
transhistory(T,TS,TS+1) :- fire(T,TS), trans(T), timestep(TS).
transhistory(T,H,TS+1) :- fire(T,TS), transhistory(T,H,TS), trans(T), timestep(TS), timestep(H).
transhistory(T,H,TS+1) :- btfire(T,TS), transhistory(T,H,TS), not highestinstance(T,H,TS), trans(T), timestep(TS), timestep(H).
transhistory(T,H,TS+1) :- transhistory(T,H,TS), not btfire(T,TS), not fire(T,TS), timestep(TS), trans(T), timestep(H).

% FIND ALL TRANSITIONS THAT CAN BE BT ENABLED 
not_historyempty(T,TS) :- transhistory(T,H,TS), H < TS, trans(T), timestep(TS), timestep(H).
% NOTE: I created the following predicate in order to avoid having not in front of not_history... (it's unreadable).
historyempty(T,TS) :- not not_historyempty(T,TS), trans(T), timestep(TS).

% A transition can't be backtrack-enabled if the transition's history is empty. 
not_btenabled(T,TS) :- historyempty(T,TS), trans(T), timestep(TS). 

% A transition can't be backtracked if its history doesn't contain the highest value among all transitions.
not_btenabled(T1,TS) :- transhistory(T1,H1,TS), transhistory(T2,H2,TS), T1!=T2, H2>H1, trans(T1), trans(T2), timestep(TS),
                        timestep(H1), timestep(H2).

% A transition can't be backtracked if not all tokens and bonds required for its reversal are available in its outgoing places.
not_btenabled(T,TS) :- outcoming(T,P,Q), not placeholds(P,Q,TS), not bonded(P,Q,TS), 
                    timestep(TS), trans(T), place(P), token(Q).
not_btenabled(T,TS) :- outcomingbond(T,P,Q1,Q2), not placeholdsbond(P,Q1,Q2,TS), not placeholdsbond(P,Q2,Q1,TS),
                    timestep(TS), trans(T), place(P), token(Q1), token(Q2).

btenabled(T,TS) :- not not_btenabled(T,TS), trans(T), timestep(TS).

% FIRE TRANSITION
{btfire(T,TS)} :- btenabled(T,TS), timestep(TS), trans(T).

% DISABLE PARALLEL BACKTRACKING AND FORWARD EXECUTION OF TWO TRANSITIONS IF THE TRANSITIONS NEED COMMON RESOURCES. 
:- btfire(T1,TS), fire(T2,TS), T1!=T2, outcoming(T1,P,Q), incoming(P,T2,Q), 
    timestep(TS), trans(T1), trans(T2), place(P), token(Q).
:- btfire(T1,TS), fire(T2,TS), T1!=T2, onoutcoming(T1,P,Q1), onincoming(P,T2,Q2), placeholdsconnection(P,Q1,Q2,TS),
    timestep(TS), trans(T1),trans(T2), place(P), token(Q1), token(Q2).
:- btfire(T1,TS), fire(T2,TS), T1!=T2, onoutcoming(T1,P,Q1), onincoming(P,T2,Q2), placeholdsconnection(P,Q2,Q1,TS),
    timestep(TS), trans(T1),trans(T2), place(P), token(Q1), token(Q2). 
:- fire(T,TS), btfire(T,TS), trans(T), timestep(TS).

countbtfire(N,TS) :- N = #count{T : btfire(T,TS), trans(T)}, timestep(TS).
:- countfire(N,TS), countbtfire(M,TS), timestep(TS), M + N = 0. 

% FIND ALL THE TOKENS/BONDS THAT ARE NEEDED FOR THE BACKTRACKING.
btused(Q,TS+1) :- btfire(T,TS), outcoming(T,P,Q), outcomingarc(T,P), timestep(TS), trans(T), place(P), token(Q).
btusedbond(Q1,Q2,TS+1) :- btfire(T,TS), outcomingbond(T,P,Q1,Q2), timestep(TS), trans(T), place(P), token(Q1), token(Q2).
btusedbond(Q1,Q2,TS+1) :- btfire(T,TS), onoutcoming(T,P,Q1), placeholdsbond(P,Q1,Q2,TS),
                        timestep(TS), trans(T), place(P), token(Q1), token(Q2).
btusedbond(Q1,Q2,TS+1) :- btfire(T,TS), onoutcoming(T,P,Q2), placeholdsbond(P,Q1,Q2,TS),
                        timestep(TS), trans(T), place(P), token(Q1), token(Q2).
btusedbond(Q1,Q2,TS+1) :- btfire(T,TS), onoutcoming(T,P,Q3), placeholdsconnection(P,Q1,Q3,TS), placeholdsbond(P,Q1,Q2,TS),
                        timestep(TS), trans(T), place(P), token(Q1), token(Q2), token(Q3).
btusedbond(Q1,Q2,TS+1) :- btfire(T,TS), onoutcoming(T,P,Q3), placeholdsconnection(P,Q3,Q1,TS), placeholdsbond(P,Q1,Q2,TS),
                        timestep(TS), trans(T), place(P), token(Q1), token(Q2), token(Q3).
% Keep tokens at their previous timestep places, if they are not needed by a transition 

keeptoken(Q1,TS) :- placeholds(P,Q1,TS-1), not btused(Q1,TS), not used(_,Q1,TS), place(P), token(Q1), timestep(TS).
keepbond(Q1,Q2,TS) :- placeholdsbond(P,Q1,Q2,TS-1), not btusedbond(Q1,Q2,TS), not usedbond(_,Q1,Q2,TS),
place(P), token(Q1), token(Q2), Q1!=Q2, timestep(TS).

% UPDATE TOKENS'/BONDS' POSITION.
not_breaks(Q1,Q2,TS) :- btfire(T,TS-1), placeholdsbond(TP,Q1,Q2,TS-1), incomingbond(PT,T,Q1,Q2), 
                     trans(T), place(PT), place(TP), token(Q1), token(Q2), timestep(TS).
not_breaks(Q1,Q2,TS) :- btfire(T,TS-1), placeholdsbond(TP,Q1,Q2,TS-1), incomingbond(PT,T,Q2,Q1),
                     trans(T), place(PT), place(TP), token(Q1), token(Q2), timestep(TS).

breaks(Q1,Q2,TS) :- btfire(T,TS-1), outcomingbond(T,TP,Q1,Q2), placeholdsbond(TP,Q1,Q2,TS-1), 
                    not not_breaks(Q1,Q2,TS), not not_breaks(Q2,Q1,TS), 
                    trans(T), place(TP), token(Q1), token(Q2), timestep(TS).
breaks(Q1,Q2,TS) :- btfire(T,TS-1), outcomingbond(T,TP,Q2,Q1), placeholdsbond(TP,Q1,Q2,TS-1), 
                    not not_breaks(Q1,Q2,TS), not not_breaks(Q2,Q1,TS), trans(T), place(TP), token(Q1), token(Q2), timestep(TS).


placeholds(P,Q1,TS) :- keeptoken(Q1,TS), placeholds(P,Q1,TS-1), timestep(TS), place(P), token(Q1).
placeholdsbond(P,Q1,Q2,TS) :- keepbond(Q1,Q2,TS), placeholdsbond(P,Q1,Q2,TS-1), place(TP), token(Q1), token(Q2), timestep(TS).

placeholds(P,Q,TS) :- btfire(T,TS-1), not bonded(P,Q,TS), incoming(P,T,Q), timestep(TS), place(P), token(Q), trans(T).

placeholdsbond(P,Q1,Q2,TS) :- btfire(T,TS-1), not breaks(Q1,Q2,TS), onincoming(P,T,Q1), placeholdsbond(TP,Q1,Q2,TS-1), P!=TP,
                              trans(T), place(P), place(TP), token(Q1), token(Q2), timestep(TS).
placeholdsbond(P,Q1,Q2,TS) :- btfire(T,TS-1), not breaks(Q1,Q2,TS), onincoming(P,T,Q2), placeholdsbond(TP,Q1,Q2,TS-1), P!=TP,
                              trans(T), place(P), place(TP), token(Q1), token(Q2), timestep(TS).
placeholdsbond(P,Q1,Q2,TS) :- btfire(T,TS-1), not breaks(Q1,Q2,TS), onincoming(P,T,Q3), placeholdsconnection(TP,Q1,Q3,TS-1),
                              placeholdsbond(TP,Q1,Q2,TS-1), not breaks(Q1,Q3,TS), not breaks(Q3,Q1,TS), 
                              not breaks(Q2,Q3,TS), not breaks(Q3,Q2,TS), TP!=P, trans(T), place(P), place(TP), 
                              token(Q1), token(Q2), token(Q3), timestep(TS).
placeholdsbond(P,Q1,Q2,TS) :- btfire(T,TS-1), not breaks(Q1,Q2,TS), onincoming(P,T,Q3), placeholdsconnection(TP,Q3,Q1,TS-1),
                              placeholdsbond(TP,Q1,Q2,TS-1), not breaks(Q1,Q3,TS), not breaks(Q3,Q1,TS),
                              not breaks(Q2,Q3,TS), not breaks(Q3,Q2,TS), TP!=P, 
                              trans(T), place(P), place(TP), token(Q1), token(Q2), token(Q3), timestep(TS).

#show fire/2.
%#show transhistory/3.
#show btenabled/2.
#show btfire/2.
#show placeholds/3.
#show placeholdsbond/4.
%#show enabled/2.
%#show placeholds/3.
%#show keepbond/3.
%#show breaks/3.
%#show not_breaks/3.
